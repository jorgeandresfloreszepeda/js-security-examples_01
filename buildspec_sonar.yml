version: 0.2

env:
  secrets-manager:
    SONARQUBE_TOKEN: prod/sonar:sonartoken
    SONARQUBE_URL: prod/sonar:HOST
    SONARQUBE_PROJECT: prod/sonar:Project
    SONARQUBE_ORGANIZATION: prod/sonar:Organization
phases:
  install:
    runtime-versions:
      java: corretto11
    commands:
      - echo "Hola Herramientas DevSecOps 24022025"
      - apt-get update
      - apt-get install -y jq
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      - unzip ./sonar-scanner-cli-5.0.1.3006-linux.zip
      - mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
      - chmod +x /opt/sonar-scanner/bin/sonar-scanner
      - export PATH="$PATH:/opt/sonar-scanner/bin"
      - echo $JAVA_HOME
      - echo $PATH  
      # Install a simple HTTP server (e.g., Python's http.server) and OWASP ZAP
      - apt-get install -y python3
      - apt-get install -y snapd       # Install snapd to use Snap for ZAP installation
      - snap install zaproxy --classic # Install OWASP ZAP via Snap
      - echo $JAVA_HOME
      - echo $PATH
  pre_build:
    commands:
      - echo "Verifying ZAP installation..."
      - /snap/bin/zaproxy -version     # Check ZAP version to confirm installation
  build:
    commands:
      - echo "Running SonarQube Scan..."
      - sonar-scanner -Dsonar.projectKey=$SONARQUBE_PROJECT -Dsonar.sources=. -Dsonar.host.url=$SONARQUBE_URL -Dsonar.login=$SONARQUBE_TOKEN -Dsonar.organization=$SONARQUBE_ORGANIZATION
      - sleep 5
      - curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=$SONARQUBE_PROJECT > analysis.json
      - cat analysis.json
      - echo "Starting dynamic testing..."
      # Start a simple web server in the background to serve the HTML/JS app
      - python3 -m http.server 80 &
      - SERVER_PID=$!
      # Give the server a moment to start
      - sleep 2
      # Run OWASP ZAP scan against the running app
      - zap-cli --zap-path /usr/bin quick-scan --self-contained --start-options '-config api.disablekey=true' http://localhost:80
      # Stop the server after the scan
      - kill $SERVER_PID
artifacts:
  files:
    - '**/*'
